import sys
import math

def cross(o, a, b):
    return (a[0]-o[0])*(b[1]-o[1]) - (a[1]-o[1])*(b[0]-o[0])

def lower_chain(points):
    pts = sorted(set(points))
    lower = []
    for p in pts:
        while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0:
            lower.pop()
        lower.append(p)
    return lower

def path_length(points):
    s = 0.0
    for i in range(len(points)-1):
        dx = points[i+1][0] - points[i][0]
        dy = points[i+1][1] - points[i][1]
        s += math.hypot(dx, dy)
    return s

def main():
    data = sys.stdin.read().strip().split()
    if not data:
        return
    it = iter(data)
    n = int(next(it))
    pts = [(int(next(it)), int(next(it))) for _ in range(n)]
    lower = lower_chain(pts)
    # If there are fewer than 2 points in the lower chain, length is 0
    L = path_length(lower) if len(lower) >= 2 else 0.0
    # Round to nearest integer, .5 rounds up:
    ans = int(math.floor(L + 0.5))
    print(ans)

if __name__ == "__main__":
    main()
